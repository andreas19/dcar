Introduction
============

An at least basic knowledge of D-Bus and its specification is required for
working with this library.

.. seealso::

   * `Wikipedia <https://en.wikipedia.org/wiki/D-Bus>`_
   * `Specification <https://dbus.freedesktop.org/doc/dbus-specification.html>`_


Features
--------

Supported authentication mechanisms
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* EXTERNAL
* DBUS_COOKIE_SHA1
* ANONYMOUS

Supported transports
^^^^^^^^^^^^^^^^^^^^

* Unix Domain Sockets
* TCP Sockets
* Nonce-authenticated TCP Sockets

Unix file descriptor passing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If supported by the actual transport, file descriptors or file objects with a
``fileno()`` method can be used as arguments for parameters with the
D-Bus type code ``'h'``. The file descriptors should be :func:`duplicated <os.dup>`
before passing them as arguments. For convinience the :class:`dcar.UnixFD` class
should be used.


Examples
--------

Calling a method
^^^^^^^^^^^^^^^^

.. code-block:: python

   import dcar

   with dcar.Bus() as bus:
       reply = bus.method_call('/org/freedesktop/DBus',
                               'org.freedesktop.DBus',
                               'GetId',
                               'org.freedesktop.DBus')
       print(reply[0])


Subscribing to a signal
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   import dcar
   
   bus = dcar.Bus()
   bus.register_signal(dcar.MatchRule(interface='org.freedesktop.DBus',
                                      signal_name='NameAcquired'),
                       lambda x: print('NameAcquired:', x.args[0]),
                       unicast=True)
   with bus:
       bus.register_signal(dcar.MatchRule(interface='org.freedesktop.DBus',
                                          signal_name='NameOwnerChanged'),
                           lambda x: print('NameOwnerChanged:', x.args))
       reply = bus.method_call('/org/freedesktop/DBus',
                               'org.freedesktop.DBus',
                               'RequestName',
                               'org.freedesktop.DBus',
                               signature='su',
                               args=('test.Dummy', 0))
       print(reply[0])
       bus.block()


Export a method
^^^^^^^^^^^^^^^

.. code-block:: python

   import dcar
   
   def echo(bus, msginfo):
       bus.method_return(msginfo.serial, msginfo.sender,
                         signature='s', args=msginfo.args)
   
   bus = dcar.Bus()
   bus.register_method('/test/Dummy', 'test.Dummy', 'Echo', echo, 's')
   with bus:
       reply = bus.method_call('/org/freedesktop/DBus',
                               'org.freedesktop.DBus',
                               'RequestName',
                               'org.freedesktop.DBus',
                               signature='su',
                               args=('test.Dummy', 0))
       print(reply[0])  # should be 1
       bus.block()

This method can be called like this:

.. code-block:: python

   import dcar
   
   with dcar.Bus() as bus:
       reply = bus.method_call('/test/Dummy', 'test.Dummy',
                               'Echo', 'test.Dummy',
                               signature='s', args=('Hei',))
       print(reply[0])
